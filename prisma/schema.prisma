// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  name     String?
  username String    @unique
  email    String?   @unique
  password String
  active   Boolean   @default(false)
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id     String  @id @default(cuid())
  name   String
  Stocks Stock[]
  Offers Offer[]
}

model Stock {
  id      String @id @default(cuid())
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String
  amount  Int
}

model ProductTag {
  id       String    @id @default(cuid())
  name     String
  Products Product[]
}

model ProductCategory {
  id       String    @id @default(cuid())
  name     String
  Products Product[]
}

model Product {
  id           String          @id @default(cuid())
  name         String
  short_name   String
  description  String
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  tags         ProductTag[]
  categoryId   String
  Offers       Offer[]
  PurchaseItem PurchaseItem[]
}

model Offer {
  id        String     @id @default(cuid())
  type      AmountType
  amount    Int?
  value     Float
  Product   Product    @relation(fields: [productId], references: [id])
  productId String
  SaleItems SaleItem[]
  Store     Store      @relation(fields: [storeId], references: [id])
  storeId   String
}

enum AmountType {
  NORMAL
  X_AMOUNT
  PLUS_AMOUNT
}

model Contact {
  id          String     @id @default(cuid())
  name        String
  email       String[]
  phoneNumber String[]
  Sales       Sale[]
  Purchases   Purchase[]
}

model Sale {
  id        String     @id @default(cuid())
  total     Float
  modified  String? // When modified, its value is a text chain with the modification's reason
  SaleItems SaleItem[]
  client    Contact?   @relation(fields: [clientId], references: [id])
  clientId  String?
}

model SaleItem {
  id       String   @id @default(cuid())
  offer    Offer    @relation(fields: [offerId], references: [id])
  offerId  String
  modified Boolean? // Same as in Sale
  sale     Sale     @relation(fields: [saleId], references: [id])
  saleId   String
  amount   Float
  total    Float
}

model Purchase {
  id                 String              @id @default(cuid())
  total              Float
  provider           Contact?            @relation(fields: [providerId], references: [id])
  providerId         String?
  PurchaseItems      PurchaseItem[]
  ExtraPurchaseItems ExtraPurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  amount     Float
  total      Float
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
}

model ExtraPurchaseItem {
  id         String   @id @default(cuid())
  name       String
  value      Float
  Purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
}
